{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["App","useState","string","setString","word","setWord","coordinatesOfLetters","setCoordinatesOfLetters","buttonResetOn","setButtonResetOn","buttonImplementOn","setButtonImplementOn","error","setError","useEffect","length","regEx","characterArrayLength","split","lines","Math","sqrt","splitArr","x","z","push","slice","result","className","style","container","display","flexDirection","margin","width","type","placeholder","value","onChange","e","test","currentTarget","toUpperCase","Number","isInteger","onClickHandlerStringValidationCheck","disabled","wordArrayLength","incomingValue","indexOf","substr","onClickHandlerWordValidationCheck","onClick","counter","y","i","includes","map","arr","index","ins","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.39d80d54.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport style from './App.module.css';\n\nfunction App() {\n\n    const [string, setString] = useState('');\n    const [word, setWord] = useState('');\n    const [coordinatesOfLetters, setCoordinatesOfLetters] = useState<number[][]>([]);\n    const [buttonResetOn, setButtonResetOn] = useState(false);\n    const [buttonImplementOn, setButtonImplementOn] = useState(true);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if (string.length === 0) {\n            setWord('');\n        }\n    }, [string]);\n\n    const regEx = /^[A-Z]*$/;\n    const characterArrayLength = string.split('').length;\n    const lines = Math.sqrt(characterArrayLength);\n    const splitArr: any[] = [];\n    for (let x = 0, z = lines; x < string.split('').length; x += lines, z += lines) {\n        splitArr.push(string.split('').slice(x, z));\n    }\n    const result: number[][] = [];\n\n    const onClickHandlerStringValidationCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setCoordinatesOfLetters([]);\n        setError('');\n        if (regEx.test(e.currentTarget.value.toUpperCase())) {\n            if (characterArrayLength === 0) {\n                setString(e.currentTarget.value.toUpperCase());\n                setButtonResetOn(true);\n            }\n            if (Number.isInteger(Math.sqrt(characterArrayLength + 1))) {\n                setString(e.currentTarget.value.toUpperCase());\n                setButtonImplementOn(false);\n            } else {\n                setString(e.currentTarget.value.toUpperCase());\n                setButtonImplementOn(true);\n                setError('The number of characters must be n^2');\n            }\n        } else {\n            setError('Only english alphabetic characters');\n        }\n    };\n\n    const onClickHandlerWordValidationCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const wordArrayLength = word.split('').length;\n        const incomingValue = e.currentTarget.value.toUpperCase();\n        setError('');\n\n        if (regEx.test(e.currentTarget.value.toUpperCase())) {\n            if (wordArrayLength === 0 && string.indexOf(incomingValue) !== -1) {\n                setWord(e.currentTarget.value.toUpperCase());\n                setButtonResetOn(true);\n            }\n            if (string.indexOf(incomingValue.substr(incomingValue.length - 1), 1) !== -1) {\n                setWord(e.currentTarget.value.toUpperCase());\n            }\n        } else {\n            setError('Only english alphabetic characters');\n        }\n    };\n\n    const onClickHandlerClearAllStates = () => {\n        setString('');\n        setWord('');\n        setButtonResetOn(false);\n        setButtonImplementOn(true);\n        setError('');\n        setCoordinatesOfLetters([])\n    };\n\n    const onClickHandlerMatrix = () => {\n        let counter = 0;\n\n        for (let y = 0; y < word.length; y++) {\n            for (let i = 0; i < splitArr.length; i++) {\n                if (y === 0 && result.length === 0 && splitArr[i].includes(word[y])) {\n                    result.push([i, splitArr[i].indexOf(word[y])]);\n                    setCoordinatesOfLetters([...result]);\n                    break;\n                }\n                if (y !== 0 && splitArr[i - 1] && splitArr[i - 1][result[result.length - 1][1]] === word[y]) {\n                    result.push([i - 1, result[counter][1]]);\n                    setCoordinatesOfLetters([...result]);\n                    counter++;\n                    break;\n                }\n                if (\n                    y !== 0\n                    && splitArr[i][result[counter][1] - 1]\n                    && splitArr[i][result[result.length - 1][1] - 1] === word[y]\n                )\n                {\n                    result.push([i, result[counter][1] - 1]);\n                    setCoordinatesOfLetters([...result]);\n                    counter++;\n                    break;\n                }\n                if (\n                    y !== 0\n                    && splitArr[i][result[counter][1] + 1]\n                    && splitArr[i][result[result.length - 1][1] + 1] === word[y]\n                )\n                {\n                    result.push([i, result[counter][1] + 1]);\n                    setCoordinatesOfLetters([...result]);\n                    counter++;\n                    break;\n                }\n                if (y !== 0 && splitArr[i + 1] && splitArr[i + 1][result[result.length - 1][1]] === word[y]) {\n                    result.push([i + 1, result[counter][1]]);\n                    setCoordinatesOfLetters([...result]);\n                    counter++;\n                    break;\n                } else {\n                    setError(`Checking stopped ! Inside your test word is the symbol \"${word[y]}\" must be in close\n                     proximity to the  preceding symbol \"${word[y - 1]}\" for example top, bottom, left or right !`);\n                    y = word.length + 1;\n                    i = splitArr.length + 1;\n                }\n            }\n        }\n    };\n\n    return (\n        <div className={style.container} style={{display: 'flex', flexDirection: 'column', margin: '100px auto', width: '60vw'}}>\n            <input\n                type=\"text\"\n                placeholder={'Enter only english alphabetic characters n^2'}\n                value={string}\n                onChange={(e) => onClickHandlerStringValidationCheck(e)}/>\n            <input\n                disabled={string.length === 0 || !buttonResetOn}\n                type=\"text\"\n                placeholder={'Enter a test word'}\n                value={word}\n                onChange={(e) => onClickHandlerWordValidationCheck(e)}/>\n            <input type=\"button\" onClick={onClickHandlerMatrix} value={'Implement'} disabled={buttonImplementOn}/>\n            <input type=\"button\" onClick={onClickHandlerClearAllStates} value={'Reset'} disabled={!buttonResetOn}/>\n            {\n                Number.isInteger(lines)\n                    ? <table>\n                        <tbody>\n                        {splitArr.map((arr: number[], index) => <tr key={index}>\n                            {arr.map((ins: number, index) => <td key={index}>\n                                {ins}\n                            </td>)}\n                        </tr>)}\n                        </tbody>\n                    </table>\n                    : null\n            }\n            <ul>{coordinatesOfLetters.map((ins: number[]) => <li>{ins[0] + '-' + ins[1]}</li>)}</ul>\n            {\n                error\n                    ? <span style={{color: \"red\"}}>{error}</span>\n                    : null\n            }\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}